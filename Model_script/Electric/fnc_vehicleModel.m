function [ sys , rel ]  = fnc_vehicleModel( model , track )
%
import casadi.*
%
%% Parameter scaling
scaling_factor = 1.2;
load_transfer_factor = 1.5;
%
%% Definition of INPUTS in CasAdi syntax
%
% Braking force
sys.inputs.brk = SX.sym('brk');
sys.inputs.brk_lb = 0;
sys.inputs.brk_ub = 1;
% Traction force
sys.inputs.thr = SX.sym('thr');
sys.inputs.thr_lb = 0;
sys.inputs.thr_ub = 1;
% Steering wheel angle
sys.inputs.delta_v_norm = SX.sym('delta_v_norm');
sys.inputs.delta_v_norm_lb = -1;
sys.inputs.delta_v_norm_ub = 1;
%
% Scaling factors
sys.inputs.delta_v_scaling = model.opt.delta_v_max;%pi;
%
% Inputs
sys.inputs.delta_v = sys.inputs.delta_v_norm * sys.inputs.delta_v_scaling;
%
%% Definition of STATES in CasAdi syntax
%
% Longitudinal velocity in body frame
sys.states.u_norm = SX.sym('u_norm');
sys.states.u_norm_lb = 0;
sys.states.u_norm_ub = 1;
% lateral velocity in body frame
sys.states.v_norm = SX.sym('v_norm');
sys.states.v_norm_lb = -1;
sys.states.v_norm_ub = 1;
% Yaw rate
sys.states.r_norm = SX.sym('r_norm');
sys.states.r_norm_lb = -1;
sys.states.r_norm_ub = 1;
% x-coordinate
sys.states.x_norm = SX.sym('x_norm');
sys.states.x_norm_lb = -1;
sys.states.x_norm_ub = 1;
% y-coordinate
sys.states.y_norm = SX.sym('y_norm');
sys.states.y_norm_lb = -1;
sys.states.y_norm_ub = 1;
% psi-coordinate
sys.states.psi_norm = SX.sym('psi_norm');
sys.states.psi_norm_lb = -1;
sys.states.psi_norm_ub = 1;
% SOC
sys.states.SOC_norm = SX.sym('SOC_norm');
sys.states.SOC_norm_lb = 0;
sys.states.SOC_norm_ub = 1;
% Temperature 
sys.states.T_norm = SX.sym('T_norm');
sys.states.T_norm_lb = 0.;
sys.states.T_norm_ub = 1;
%
% Scaling factors
sys.states.u_scaling = model.opt.u_max;
sys.states.v_scaling = model.opt.v_max;
sys.states.r_scaling = model.opt.r_max;
sys.states.x_scaling = model.opt.x_max;
sys.states.y_scaling = model.opt.y_max;
sys.states.psi_scaling = model.opt.psi_max;
sys.states.SOC_scaling = model.vehicle.bat.SOC_max - model.vehicle.bat.SOC_min;
sys.states.T_scaling = model.opt.T_max;
%
sys.states.X_scale = [ ...
    sys.states.u_scaling; ...
    sys.states.v_scaling; ...
    sys.states.r_scaling; ...
    sys.states.x_scaling; ...
    sys.states.y_scaling; ...
    sys.states.psi_scaling; ...
    sys.states.SOC_scaling; ...
    sys.states.T_scaling; ...
    ];
%
% States
sys.states.u = sys.states.u_norm * sys.states.u_scaling;
sys.states.v = sys.states.v_norm * sys.states.v_scaling;
sys.states.r = sys.states.r_norm * sys.states.r_scaling;
sys.states.x = sys.states.x_norm * sys.states.x_scaling;
sys.states.y = sys.states.y_norm * sys.states.y_scaling;
sys.states.psi = sys.states.psi_norm * sys.states.psi_scaling;
sys.states.SOC = model.vehicle.bat.SOC_min + sys.states.SOC_norm * sys.states.SOC_scaling; 
sys.states.T = sys.states.T_norm * sys.states.T_scaling;
%
%% Definition of ALGEBRAIC PARAMETERS in CasAdi syntax
%
% Longitudinal force front
sys.parameters.Fxf_norm = SX.sym('Fxf_norm');
sys.parameters.Fxf_norm_lb = -1;
sys.parameters.Fxf_norm_ub = 1;
% Longitudinal force rear
sys.parameters.Fxr_norm = SX.sym('Fxr_norm');
sys.parameters.Fxr_norm_lb = -1;
sys.parameters.Fxr_norm_ub = 1;
% Lateral force front
sys.parameters.Fyf_norm = SX.sym('Fyf_norm');
sys.parameters.Fyf_norm_lb = -1;
sys.parameters.Fyf_norm_ub = 1;
% Lateral force rear
sys.parameters.Fyr_norm = SX.sym('Fyr_norm');
sys.parameters.Fyr_norm_lb = -1;
sys.parameters.Fyr_norm_ub = 1;
% Vertical force front
sys.parameters.Fzf_norm = SX.sym('Fzf_norm');
sys.parameters.Fzf_norm_lb = 0;
sys.parameters.Fzf_norm_ub = 1;
% Vertical force rear
sys.parameters.Fzr_norm = SX.sym('Fzr_norm');
sys.parameters.Fzr_norm_lb = 0;
sys.parameters.Fzr_norm_ub = 1;
% Longitudinal acceleration in vehicle-fixed frame
sys.parameters.ax_norm = SX.sym('ax_norm');
sys.parameters.ax_norm_lb = -1;
sys.parameters.ax_norm_ub = 1;
% Lateral acceleration in vehicle-fixed frame
sys.parameters.ay_norm = SX.sym('ay_norm');
sys.parameters.ay_norm_lb = -1;
sys.parameters.ay_norm_ub = 1;
% Torque factor front
sys.parameters.betaf = SX.sym('betaf');
sys.parameters.betaf_lb = 0;
sys.parameters.betaf_ub = 1;
% Torque factor rear 
sys.parameters.betar = SX.sym('betar');
sys.parameters.betar_lb = 0;
sys.parameters.betar_ub = 1;
% Regenerative brake factor front  
sys.parameters.gamma1_norm = SX.sym('gamma1_norm');
sys.parameters.gamma1_norm_lb = 0;
sys.parameters.gamma1_norm_ub = 1;
% Regenerative brake factor rear  
sys.parameters.gamma2_norm = SX.sym('gamma2_norm');
sys.parameters.gamma2_norm_lb = 0;
sys.parameters.gamma2_norm_ub = 1;
% Lateral displacement
sys.parameters.ep_norm = SX.sym('ep_norm');
sys.parameters.ep_norm_lb = -1;
sys.parameters.ep_norm_ub = 1;
% Time interval
sys.parameters.dt_norm = SX.sym('dt_norm');
sys.parameters.dt_norm_lb = 0;
sys.parameters.dt_norm_ub = 1;
%
% Scaling factors
sys.parameters.Fzf_scaling = (scaling_factor * load_transfer_factor) * model.vehicle.body.Fz_0(1);
sys.parameters.Fzr_scaling = (scaling_factor * load_transfer_factor) * model.vehicle.body.Fz_0(2);
sys.parameters.Fxf_scaling = model.vehicle.tire.mux_0(1) * sys.parameters.Fzf_scaling;
sys.parameters.Fxr_scaling = model.vehicle.tire.mux_0(2) * sys.parameters.Fzr_scaling;
sys.parameters.Fyf_scaling = model.vehicle.tire.muy_0(1) * sys.parameters.Fzf_scaling;
sys.parameters.Fyr_scaling = model.vehicle.tire.muy_0(2) * sys.parameters.Fzr_scaling;
sys.parameters.ax_scaling = (scaling_factor) ...
    * (sys.parameters.Fxf_scaling + sys.parameters.Fxr_scaling) / model.vehicle.body.m;
sys.parameters.ay_scaling = (scaling_factor) ...
    * (sys.parameters.Fyf_scaling + sys.parameters.Fyr_scaling) / model.vehicle.body.m;
sys.parameters.gamma1_scaling = (model.vehicle.pt1.P_max/(model.vehicle.pt1.P_max + model.vehicle.pt2.P_max)) ...
   * model.vehicle.bat.Pin_max / ((model.vehicle.pt1.P_max + model.vehicle.pt2.P_max) * model.vehicle.bat.eta_charge_tot);
sys.parameters.gamma2_scaling = (model.vehicle.pt2.P_max/(model.vehicle.pt1.P_max + model.vehicle.pt2.P_max)) ...
    * model.vehicle.bat.Pin_max / ((model.vehicle.pt1.P_max + model.vehicle.pt2.P_max) * model.vehicle.bat.eta_charge_tot);
sys.parameters.ep_scaling = model.opt.ep_max;
sys.parameters.dt_scaling = model.opt.dt_max;

%
sys.parameters.Fxf = sys.parameters.Fxf_norm * sys.parameters.Fxf_scaling;
sys.parameters.Fxr = sys.parameters.Fxr_norm * sys.parameters.Fxr_scaling;
sys.parameters.Fyf = sys.parameters.Fyf_norm * sys.parameters.Fyf_scaling;
sys.parameters.Fyr = sys.parameters.Fyr_norm * sys.parameters.Fyr_scaling;
sys.parameters.Fzf = sys.parameters.Fzf_norm * sys.parameters.Fzf_scaling;
sys.parameters.Fzr = sys.parameters.Fzr_norm * sys.parameters.Fzr_scaling;
sys.parameters.ax = sys.parameters.ax_norm * sys.parameters.ax_scaling;
sys.parameters.ay = sys.parameters.ay_norm * sys.parameters.ay_scaling;
sys.parameters.gamma1 = sys.parameters.gamma1_norm * sys.parameters.gamma1_scaling;
sys.parameters.gamma2 = sys.parameters.gamma2_norm * sys.parameters.gamma2_scaling;
sys.parameters.ep = sys.parameters.ep_norm * sys.parameters.ep_scaling;
sys.parameters.dt = sys.parameters.dt_norm * sys.parameters.dt_scaling;
%
%% Derivative of s and module of x,alpha
%
% rel.sp = (sys.states.u * cos(sys.states.epsi) - sys.states.v * sin(sys.states.epsi)) ...
%     / (1 - sys.states.ep * track.fun_kp(sys.states.alpha));
% rel.module = track.fun_normts(sys.states.alpha) / rel.sp;
%
%% Kinematics relationships
%
% Vector with steer angles of the two axles
rel.delta = model.vehicle.body.tau * sys.inputs.delta_v;
% Vector with slip angles of the two axles
rel.alphay = rel.delta - atan((sys.states.v + model.vehicle.body.C * sys.states.r) ./ sys.states.u);
% Differential housing speed
rel.omega_h = sys.states.u ./ model.vehicle.tire.R_dyn;
% 3D gravity
sys.gravity.g3D = SX.sym('g3D',3,1);

%% Brake system model
%
rel.Fxb_mech = sys.inputs.brk .* model.vehicle.body.Fxb_max;
%
% %% PT1 ICE equations
% %
% % Reduction ratio
% rel.pt1_tau_fun = Function('pt1_tau', {sys.states.u_norm}, ...
%     {model.vehicle.pt1.tau_map_ratio(1) + sum(diff(model.vehicle.pt1.tau_map_ratio) ...
%     .* (0.5 * (1 + tanh(atanh(0.9) / model.vehicle.pt1.delta_speed ...
%     * (sys.states.u - model.vehicle.pt1.tau_map_speed(1:(end-1)))))))}, ...
%     {'u_norm'}, {'PT1 reduction ratio'});
% % Engine speed
% rel.pt1_omega_fun = Function('pt1_omega', {sys.states.u_norm}, ...
%     {rel.omega_h(1) ./ rel.pt1_tau_fun(sys.states.u_norm)}, ...
%     {'u_norm'}, {'PT1 speed'});
% % Engine power curve
% rel.pt1_Pout_fun = Function('pt1_Pout', {sys.states.u_norm}, ...
%     {dot(model.vehicle.pt1.P_map, ...
%     rel.pt1_omega_fun(sys.states.u_norm).^(length(model.vehicle.pt1.P_map)-1:-1:0))}, ...
%     {'u_norm'}, {'PT1 power'});
% % Traction force
% rel.pt1_Fxt_fun = Function('pt1_Fxt', ...
%     {sys.states.u_norm, sys.inputs.thr}, ...
%     {sys.inputs.thr .* model.vehicle.pt1.eta ...
%     * rel.pt1_Pout_fun(sys.states.u_norm) ./ sys.states.u}, ...
%     {'u_norm', 'thr'}, {'PT1 tractive force'});
% %
%% PT1 e-Motor equations
%
% Reduction ratio
rel.pt1_tau_fun = Function('pt1_tau', {sys.states.u_norm}, ...
    {model.vehicle.pt1.tau_map_ratio}, ...
    {'u_norm'}, {'PT1 reduction ratio'});
% Engine speed
rel.pt1_omega_fun = Function('pt1_omega', {sys.states.u_norm}, ...
    {rel.omega_h(1) ./ rel.pt1_tau_fun(sys.states.u_norm)}, ...
    {'u_norm'}, {'PT1 speed'});
% Engine power curve
% rel.pt1_Pout_fun = Function('pt1_Pout', {sys.states.u_norm}, ...
%     {model.vehicle.pt1.P_max ...
%     .* min(rel.pt1_omega_fun(sys.states.u_norm) / model.vehicle.pt1.omega_base, 1)}, ...
%     {'u_norm'}, {'PT1 power'});
rel.pt1_Pout_fun = Function('pt1_Pout', {sys.states.u_norm}, ...
    {model.vehicle.pt1.P_max ...
    .* if_else_smooth(rel.pt1_omega_fun(sys.states.u_norm)/model.vehicle.pt1.omega_base, 1, 1,rel.pt1_omega_fun(sys.states.u_norm)/model.vehicle.pt1.omega_base,'C',50)}, ...
    {'u_norm'}, {'PT1 power'});
% Traction force
rel.pt1_Fxt_fun = Function('pt1_Fxt', ...
    {sys.states.u_norm, sys.parameters.betaf, sys.parameters.gamma1_norm}, ...
    {model.vehicle.pt1.eta * (sys.parameters.betaf ...
    - sys.parameters.gamma1) ...
    * rel.pt1_Pout_fun(sys.states.u_norm) ./ sys.states.u}, ...
    {'u_norm', 'betaf', 'gamma1_norm'}, {'PT1 tractive force'});
%
%% PT2 e-Motor equations
%
% Reduction ratio
rel.pt2_tau_fun = Function('pt2_tau', {sys.states.u_norm}, ...
    {model.vehicle.pt2.tau_map_ratio}, ...
    {'u_norm'}, {'PT2 reduction ratio'});
% Engine speed
rel.pt2_omega_fun = Function('pt2_omega', {sys.states.u_norm}, ...
    {rel.omega_h(2) ./ rel.pt2_tau_fun(sys.states.u_norm)}, ...
    {'u_norm'}, {'PT2 speed'});
% Engine power curve
% rel.pt2_Pout_fun = Function('pt2_Pout', {sys.states.u_norm}, ...
%     {model.vehicle.pt2.P_max ...
%     .* min(rel.pt2_omega_fun(sys.states.u_norm) / model.vehicle.pt2.omega_base, 1)}, ...
%     {'u_norm'}, {'PT2 power'});
rel.pt2_Pout_fun = Function('pt2_Pout', {sys.states.u_norm}, ...
    {model.vehicle.pt2.P_max ...
    .* if_else_smooth(rel.pt2_omega_fun(sys.states.u_norm) / model.vehicle.pt2.omega_base, 1, 1, rel.pt2_omega_fun(sys.states.u_norm) / model.vehicle.pt2.omega_base,'C',50)}, ...
    {'u_norm'}, {'PT2 power'});
% Traction force
rel.pt2_Fxt_fun = Function('pt2_Fxt', ...
    {sys.states.u_norm, sys.parameters.betar, sys.parameters.gamma2_norm}, ...
    {model.vehicle.pt2.eta * (sys.parameters.betar ...
    - sys.parameters.gamma2) ...
    * rel.pt2_Pout_fun(sys.states.u_norm) ./ sys.states.u}, ...
    {'u_norm', 'betar', 'gamma2_norm'}, {'PT2 tractive force'});
%
%% Force relationships
%
% Vertical axle loads
rel.Ze = -(0.5 * model.vehicle.aero.S * model.vehicle.aero.rho * sys.states.u^2) * ...
    (model.vehicle.aero.C_l + model.vehicle.aero.h_d / model.vehicle.body.l ...
    * model.vehicle.aero.C_d * [1; -1]);
rel.Z0 = model.vehicle.body.Fz_0 * (sys.gravity.g3D(3) / model.global.g);
rel.Zx = -(model.vehicle.body.m * model.vehicle.body.h / model.vehicle.body.l) ...
    * sys.parameters.ax * [1; -1];
rel.Z = rel.Ze + rel.Z0 + rel.Zx;
%
% Tire longitudinal and lateral friction coefficients
rel.muy = model.vehicle.tire.muy_0 + model.vehicle.tire.k_muy .* rel.Z;
%
% Longitudinal and lateral axle loads
rel.Xe = -model.vehicle.aero.C_d * model.vehicle.aero.S ...
    * (0.5 * model.vehicle.aero.rho * sys.states.u^2) * [0.5; 0.5];
rel.X = [sys.parameters.Fxf; sys.parameters.Fxr] .* cos(rel.delta) ...
    - [sys.parameters.Fyf; sys.parameters.Fyr] .* sin(rel.delta);
%
rel.Ye = [0; 0];
rel.Y = [sys.parameters.Fxf; sys.parameters.Fxr] .* sin(rel.delta) ...
    + [sys.parameters.Fyf; sys.parameters.Fyr] .* cos(rel.delta);
%
rel.Ne = [0; 0];
rel.N = model.vehicle.body.C .* (rel.Ye + rel.Y);
%
%% Car's dynamic (system of ODEs)
%
rel.der_u = ([1, 1] * (rel.Xe + rel.X) / model.vehicle.body.m + sys.states.v * sys.states.r - sys.gravity.g3D(1));
rel.der_v = ([1, 1] * (rel.Ye + rel.Y) / model.vehicle.body.m - sys.states.u * sys.states.r - sys.gravity.g3D(2));
rel.der_r = ([1, 1] * (rel.Ne + rel.N) / model.vehicle.body.Jz);
rel.der_x = (sys.states.u * cos(sys.states.psi) - sys.states.v * sin(sys.states.psi));
rel.der_y = (sys.states.u * sin(sys.states.psi) + sys.states.v * cos(sys.states.psi));
rel.der_psi = sys.states.r;
rel.der_SOC = 1 / model.vehicle.bat.E_max ...
    * ((rel.pt1_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_charge_tot * ...
    sys.parameters.gamma1) ...
    + (rel.pt2_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_charge_tot * ...
    sys.parameters.gamma2) ...
    - (sys.parameters.betaf ./ model.vehicle.bat.eta_discharge_tot ...
    * rel.pt1_Pout_fun(sys.states.u_norm) ) ...
    - (sys.parameters.betar ./ model.vehicle.bat.eta_discharge_tot ...
    * rel.pt2_Pout_fun(sys.states.u_norm) ) ...
    - model.vehicle.bat.Pcooling / model.vehicle.bat.COP);
rel.der_T = 1 / model.vehicle.bat.mc ...
    * (((rel.pt1_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_charge_tot * ...
    sys.parameters.gamma1) * (1 - model.vehicle.bat.eta_charge_batt)) ...
    + ((rel.pt2_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_charge_tot * ...
    sys.parameters.gamma2) * (1 - model.vehicle.bat.eta_charge_batt)) ...
    + (sys.parameters.betaf * (1 - model.vehicle.bat.eta_discharge_batt) ...
    * rel.pt1_Pout_fun(sys.states.u_norm)) ...
    + (sys.parameters.betar * (1 - model.vehicle.bat.eta_discharge_batt) ...
    * rel.pt2_Pout_fun(sys.states.u_norm)) ...
    - model.vehicle.bat.Pcooling);
% rel.der_SOC = 1 / model.vehicle.bat.E_max ...
%     * ((rel.pt1_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_charge_tot * ...
%     sys.parameters.gamma1) ...
%     + (rel.pt2_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_charge_tot * ...
%     sys.parameters.gamma2) ...
%     - (sys.parameters.betaf ./ model.vehicle.bat.eta_discharge_tot ...
%     * rel.pt1_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_discharge_tot) ...
%     - (sys.parameters.betar ./ model.vehicle.bat.eta_discharge_tot ...
%     * rel.pt2_Pout_fun(sys.states.u_norm) * model.vehicle.bat.eta_discharge_tot) ...
%     - model.vehicle.bat.Pcooling / model.vehicle.bat.COP);
%
%% Algebric equations
%
% Equations of Fx
rel.eq01 = sys.parameters.Fxf - (rel.Fxb_mech(1) ...
    + rel.pt1_Fxt_fun(sys.states.u_norm, sys.parameters.betaf, ...
    sys.parameters.gamma1));
rel.eq02 = sys.parameters.Fxr - (rel.Fxb_mech(2) ...
    + rel.pt2_Fxt_fun(sys.states.u_norm, sys.parameters.betar, ...
    sys.parameters.gamma2));
% Equations of Fy
rel.eq03 = sys.parameters.Fyf - (rel.muy(1) * rel.Z(1) * sin(model.vehicle.tire.Cy(1) ...
    * atan(model.vehicle.tire.By(1) * rel.alphay(1) - model.vehicle.tire.Ey(1) ...
    * (model.vehicle.tire.By(1) .* rel.alphay(1) - atan(model.vehicle.tire.By(1) .* rel.alphay(1))))));
rel.eq04 = sys.parameters.Fyr - (rel.muy(2) * rel.Z(2) * sin(model.vehicle.tire.Cy(2) ...
    * atan(model.vehicle.tire.By(2) * rel.alphay(2) - model.vehicle.tire.Ey(2) ...
    * (model.vehicle.tire.By(2) .* rel.alphay(2) - atan(model.vehicle.tire.By(2) .* rel.alphay(2))))));
% Equations of Fz
rel.eq05 = sys.parameters.Fzf - rel.Z(1);
rel.eq06 = sys.parameters.Fzr - rel.Z(2);
% Equations of accelerations
rel.eq07 = sys.parameters.ax - (rel.der_u  - sys.states.v * sys.states.r);
rel.eq08 = sys.parameters.ay - (rel.der_v  + sys.states.u * sys.states.r);
%
%% Definition of states, inputs and parameters vectors
%
% Inputs
sys.inputs.U = [ ...
    sys.inputs.brk; ...
    sys.inputs.thr; ...
    sys.inputs.delta_v_norm; ...
    ];
sys.inputs.U_lb = [ ...
    sys.inputs.brk_lb; ...
    sys.inputs.thr_lb; ...
    sys.inputs.delta_v_norm_lb; ...
    ];
sys.inputs.U_ub = [ ...
    sys.inputs.brk_ub; ...
    sys.inputs.thr_ub; ...
    sys.inputs.delta_v_norm_ub; ...
    ];
sys.inputs.nu = numel(sys.inputs.U);
%
% States
sys.states.X = [ ...
    sys.states.u_norm; ...
    sys.states.v_norm; ...
    sys.states.r_norm; ...
    sys.states.x_norm; ...
    sys.states.y_norm; ...
    sys.states.psi_norm; ...
    sys.states.SOC_norm; ...
    sys.states.T_norm; ...
    ];
sys.states.X_lb = [ ...
    sys.states.u_norm_lb; ...
    sys.states.v_norm_lb; ...
    sys.states.r_norm_lb; ...
    sys.states.x_norm_lb; ...
    sys.states.y_norm_lb; ...
    sys.states.psi_norm_lb; ...
    sys.states.SOC_norm_lb; ...
    sys.states.T_norm_lb; ...
    ];
sys.states.X_ub = [ ...
    sys.states.u_norm_ub; ...
    sys.states.v_norm_ub; ...
    sys.states.r_norm_ub; ...
    sys.states.x_norm_ub; ...
    sys.states.y_norm_ub; ...
    sys.states.psi_norm_ub; ...
    sys.states.SOC_norm_ub; ...
    sys.states.T_norm_ub; ...
    ];
sys.states.nx = numel(sys.states.X);
%
% Algebraic Parameters
sys.parameters.Z = [ ...
    sys.parameters.Fxf_norm; ...
    sys.parameters.Fxr_norm; ...
    sys.parameters.Fyf_norm; ...
    sys.parameters.Fyr_norm; ...
    sys.parameters.Fzf_norm; ...
    sys.parameters.Fzr_norm; ...
    sys.parameters.ax_norm; ...
    sys.parameters.ay_norm; ...
    sys.parameters.betaf; ...
    sys.parameters.betar; ...
    sys.parameters.gamma1_norm; ...
    sys.parameters.gamma2_norm; ...
    sys.parameters.ep_norm; ...
    sys.parameters.dt_norm; ...
    ];
sys.parameters.Z_lb = [ ...
    sys.parameters.Fxf_norm_lb; ...
    sys.parameters.Fxr_norm_lb; ...
    sys.parameters.Fyf_norm_lb; ...
    sys.parameters.Fyr_norm_lb; ...
    sys.parameters.Fzf_norm_lb; ...
    sys.parameters.Fzr_norm_lb; ...
    sys.parameters.ax_norm_lb; ...
    sys.parameters.ay_norm_lb; ...
    sys.parameters.betaf_lb; ...
    sys.parameters.betar_lb; ...
    sys.parameters.gamma1_norm_lb; ...
    sys.parameters.gamma2_norm_lb; ...
    sys.parameters.ep_norm_lb; ...
    sys.parameters.dt_norm_lb; ...    
    ];
sys.parameters.Z_ub = [ ...
    sys.parameters.Fxf_norm_ub; ...
    sys.parameters.Fxr_norm_ub; ...
    sys.parameters.Fyf_norm_ub; ...
    sys.parameters.Fyr_norm_ub; ...
    sys.parameters.Fzf_norm_ub; ...
    sys.parameters.Fzr_norm_ub; ...
    sys.parameters.ax_norm_ub; ...
    sys.parameters.ay_norm_ub; ...
    sys.parameters.betaf_ub; ...
    sys.parameters.betar_ub; ...
    sys.parameters.gamma1_norm_ub; ...
    sys.parameters.gamma2_norm_ub; ...
    sys.parameters.ep_norm_ub; ...
    sys.parameters.dt_norm_ub; ...        
    ];
sys.parameters.np = numel(sys.parameters.Z);
%
rel.X_dot = [ ...
    rel.der_u; ...
    rel.der_v; ...
    rel.der_r; ...
    rel.der_x; ...
    rel.der_y; ...
    rel.der_psi; ...
    rel.der_SOC; ...
    rel.der_T; ...
    ];
%
rel.eq = [ ...
    rel.eq01; ... 
    rel.eq02; ... 
    rel.eq03; ... 
    rel.eq04; ... 
    rel.eq05; ... 
    rel.eq06; ... 
    rel.eq07; ... 
    rel.eq08; ... 
    ];
%
sys.parameters.eq_scale = [ ...
    sys.parameters.Fxf_scaling; ...
    sys.parameters.Fxr_scaling; ...
    sys.parameters.Fyf_scaling; ...
    sys.parameters.Fyr_scaling; ...
    sys.parameters.Fzf_scaling; ...
    sys.parameters.Fzr_scaling; ...
    sys.parameters.ax_scaling; ...
    sys.parameters.ay_scaling; ...
    ];
rel.eq = rel.eq./sys.parameters.eq_scale;
rel.neq = numel(rel.eq);
%
%% Definition of initial and terminal conditions
%
% States
sys.states.u_norm_0 = (sys.states.u_scaling^-1) * model.opt.u_0;
sys.states.v_norm_0 = 0;
sys.states.r_norm_0 = 0;
sys.states.x_norm_0 = (sys.states.x_scaling^-1) * model.track.pos_grid(1,1);
sys.states.y_norm_0 = (sys.states.y_scaling^-1) * model.track.pos_grid(2,1);
sys.states.psi_norm_0 = (sys.states.psi_scaling^-1) * model.track.psi_grid(1);
sys.states.SOC_norm_0 = (model.vehicle.bat.SOC_0 - model.vehicle.bat.SOC_min) ...
                        / (model.vehicle.bat.SOC_max - model.vehicle.bat.SOC_min);
sys.states.T_norm_0 = model.vehicle.bat.T_0 / model.opt.T_max;
%
sys.states.X_0 = [ ...
    sys.states.u_norm_0; ...
    sys.states.v_norm_0; ...
    sys.states.r_norm_0; ...
    sys.states.x_norm_0; ...
    sys.states.y_norm_0; ...
    sys.states.psi_norm_0; ...
    sys.states.SOC_norm_0; ...
    sys.states.T_norm_0; ...
    ];
%
% Inputs
sys.inputs.brk_0 = 0;
sys.inputs.thr_0 = model.opt.Fxt_0 * model.opt.u_0 / ...
    (rel.pt1_Pout_fun(sys.states.u_norm_0) + rel.pt2_Pout_fun(sys.states.u_norm_0));
sys.inputs.delta_v_norm_0 = 0;
%
sys.inputs.U_0 = [ ...
    sys.inputs.brk_0; ...
    sys.inputs.thr_0; ...
    sys.inputs.delta_v_norm_0; ...
    ];
%
% Algebraic Parameters
sys.parameters.betaf_0 = 1;
sys.parameters.betar_0 = 1;
sys.parameters.gamma1_norm_0 = 0;
sys.parameters.gamma2_norm_0 = 0;
sys.parameters.Fxf_norm_0 = (sys.parameters.Fxf_scaling^-1) ...
    * sys.parameters.betaf_0 * rel.pt1_Pout_fun(sys.states.u_norm_0) / model.opt.u_0;
sys.parameters.Fxr_norm_0 = (sys.parameters.Fxr_scaling^-1) ...
    * sys.parameters.betar_0 * rel.pt2_Pout_fun(sys.states.u_norm_0) / model.opt.u_0;
sys.parameters.Fyf_norm_0 = 0;
sys.parameters.Fyr_norm_0 = 0;
sys.parameters.Fzf_norm_0 = (sys.parameters.Fzf_scaling^-1) ...
    * (model.vehicle.body.Fz_0(1) -(0.5 * model.vehicle.aero.S * model.vehicle.aero.rho ...
    * (sys.states.u_norm_0 * sys.states.u_scaling)^2) ...
    * (model.vehicle.aero.C_l(1) + model.vehicle.aero.h_d ...
    / model.vehicle.body.l * model.vehicle.aero.C_d));
sys.parameters.Fzr_norm_0 = (sys.parameters.Fzr_scaling^-1) ...
    * (model.vehicle.body.Fz_0(2) -(0.5 * model.vehicle.aero.S * model.vehicle.aero.rho ...
    * (sys.states.u_norm_0 * sys.states.u_scaling)^2) ...
    * (model.vehicle.aero.C_l(2) + model.vehicle.aero.h_d ...
    / model.vehicle.body.l * model.vehicle.aero.C_d));
sys.parameters.ax_norm_0 = (sys.parameters.ax_scaling^-1) ...
    * (sys.parameters.Fxf_norm_0 * sys.parameters.Fxf_scaling ...
    + sys.parameters.Fxr_norm_0 * sys.parameters.Fxr_scaling) ...
    / model.vehicle.body.m;
sys.parameters.ay_norm_0 = 0;
sys.parameters.ep_norm_0 = 0;
sys.parameters.dt_norm_0 = 0.1;
%
sys.parameters.Z_0 = [ ...
    sys.parameters.Fxf_norm_0; ...
    sys.parameters.Fxr_norm_0; ...
    sys.parameters.Fyf_norm_0; ...
    sys.parameters.Fyr_norm_0; ...
    sys.parameters.Fzf_norm_0; ...
    sys.parameters.Fzr_norm_0; ...
    sys.parameters.ax_norm_0; ...
    sys.parameters.ay_norm_0; ...
    sys.parameters.betaf_0; ...
    sys.parameters.betar_0; ...
    sys.parameters.gamma1_norm_0; ...
    sys.parameters.gamma2_norm_0; ...
    sys.parameters.ep_norm_0; ...
    sys.parameters.dt_norm_0;
    ];
%
%% Functions 
% "sp" factor
% rel.sp_fun = Function('sp', ...
%     {sys.states.u_norm, sys.states.v_norm, sys.states.ep_norm, ...
%     sys.states.epsi_norm, sys.states.alpha}, {rel.sp}, ...
%     {'u_norm', 'v_norm', 'ep_norm', 'epsi_norm', 'alpha'}, {'sp factor'});
% "module" factor
% rel.module_fun = Function('module', ...
%     {sys.states.u_norm, sys.states.v_norm, sys.states.ep_norm, ...
%     sys.states.epsi_norm, sys.states.alpha}, {rel.module}, ...
%     {'u_norm', 'v_norm', 'ep_norm', 'epsi_norm', 'alpha'}, {'module'});
% Battery power
rel.bat_Pout = (sys.parameters.gamma2 * model.vehicle.bat.eta_charge_tot ...
    - sys.parameters.betar ./ model.vehicle.bat.eta_discharge_tot) ...
    .* rel.pt2_Pout_fun(sys.states.u_norm) ...
    + (sys.parameters.gamma1 * model.vehicle.bat.eta_charge_tot ...
    - sys.parameters.betaf ./ model.vehicle.bat.eta_discharge_tot) ...
    .* rel.pt1_Pout_fun(sys.states.u_norm) ...
    - model.vehicle.bat.Pcooling / model.vehicle.bat.COP;
rel.bat_Pout_fun = Function('bat_Pout', ...
    {sys.states.u_norm, ...
    sys.parameters.gamma1_norm, sys.parameters.gamma2_norm, ...
     sys.parameters.betaf, sys.parameters.betar}, {rel.bat_Pout}, ...
    {'u_norm', 'gamma1_norm', 'gamma2_norm', 'betaf', 'betar'}, {'Battery power'});
%
% Cornering stiffness
rel.C_alphaf = (model.vehicle.tire.By(1) * model.vehicle.tire.Cy(1) * (rel.muy(1) .* sys.parameters.Fzf)) ...
    .* (cos(model.vehicle.tire.Cy(1) * atan(model.vehicle.tire.By(1) * rel.alphay(1) ...
    - model.vehicle.tire.Ey(1) * (model.vehicle.tire.By(1) * rel.alphay(1) ...
    - atan(model.vehicle.tire.By(1) * rel.alphay(1))))) ...
    ./ (1 + (model.vehicle.tire.By(1) * rel.alphay(1) - model.vehicle.tire.Ey(1) ...
    * (model.vehicle.tire.By(1) * rel.alphay(1) - atan(model.vehicle.tire.By(1) * rel.alphay(1)))).^2)) ...
    .* (1 + model.vehicle.tire.Ey(1) * (-1 + (1 + (model.vehicle.tire.By(1) * rel.alphay(1)).^2).^-1));
rel.C_alphaf_fun = Function('C_alphaf', ...
    {sys.states.u_norm, sys.states.v_norm, sys.states.r_norm, sys.inputs.delta_v_norm, sys.parameters.Fzf_norm}, {rel.C_alphaf}, ...
    {'u_norm', 'v_norm', 'r_norm', 'delta_v_norm', 'Fzf_norm'}, {'Cornering stiffness front'});
rel.C_alphar = (model.vehicle.tire.By(2) * model.vehicle.tire.Cy(2) * (rel.muy(2) .* sys.parameters.Fzr)) ...
    .* (cos(model.vehicle.tire.Cy(2) * atan(model.vehicle.tire.By(2) * rel.alphay(2) ...
    - model.vehicle.tire.Ey(2) * (model.vehicle.tire.By(2) * rel.alphay(2) ...
    - atan(model.vehicle.tire.By(2) * rel.alphay(2))))) ...
    ./ (1 + (model.vehicle.tire.By(2) * rel.alphay(2) - model.vehicle.tire.Ey(2) ...
    * (model.vehicle.tire.By(2) * rel.alphay(2) - atan(model.vehicle.tire.By(2) * rel.alphay(2)))).^2)) ...
    .* (1 + model.vehicle.tire.Ey(2) * (-1 + (1 + (model.vehicle.tire.By(2) * rel.alphay(2)).^2).^-1));
rel.C_alphar_fun = Function('C_alphar', ...
    {sys.states.u_norm, sys.states.v_norm, sys.states.r_norm, sys.inputs.delta_v_norm, sys.parameters.Fzr_norm}, {rel.C_alphar}, ...
    {'u_norm', 'v_norm', 'r_norm', 'delta_v_norm', 'Fzr_norm'}, {'Cornering stiffness rear'});
%
end
%